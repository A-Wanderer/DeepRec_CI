# This is a basic workflow to help you get started with Actions

name: distributed_test

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      DeepRec_test_image:
        description: 'the image used to benchmark DeepRec'
        default: 'cesg-prc-registry.cn-beijing.cr.aliyuncs.com/cesg-ali/deeprec-modelzoo:latest'
      TF_test_image:
        description: 'the image used to benchmark Stock TF'
        default: 'cesg-prc-registry.cn-beijing.cr.aliyuncs.com/cesg-ali/deeprec-modelzoo:tf'
      model_list:
        description: 'Model list(use whitespace to seperate)'
        default: 'WDL DSSM DeepFM DLRM DIEN DIN'
      log_tag:
        description: 'Log Tag (used to tag you log file)'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  distribute_test:
    # The type of runner that the job will run on
    runs-on: distributed_test2

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # Runs a set of commands using the runners shell
      - name: modify the config file by inputs params
        run: |
          cd /home/shanlin/
          if [[ ! -d DeepRec_CI ]];then
              git clone https://github.com/GosTraight2020/DeepRec_CI.git
          fi      
          cd DeepRec_CI/ \
          &&git pull
          template_path=./distributed_benchmark/templates/
          template_path=$(cd $template_path && pwd)
          tf_template=$template_path/tf_template.yaml
          deeprec_template=$template_path/deeprec_template.yaml
          # modify the template
          sed -i '44c\              image: ${{github.event.inputs.DeepRec_test_image}}'  $deeprec_template \
          &&sed -i '91c\              image: ${{github.event.inputs.DeepRec_test_image}}'  $deeprec_template \
          &&sed -i '40c\              image: ${{github.event.inputs.TF_test_image}}'  $tf_template\
          &&sed -i '83c\              image: ${{github.event.inputs.TF_test_image}}'  $tf_template\
          && echo "---------------------------------------------DeepRec_template.yaml--------------------------------------------"\
          &&cat $deeprec_template\
          &&echo "----------------------------------------------------end-------------------------------------------------------"\
          &&echo "------------------------------------------------tf_template.yaml----------------------------------------------"\
          &&cat $tf_template\
          &&echo "----------------------------------------------------end-------------------------------------------------------"     
          # produce the new template
          model_array=(${{github.event.inputs.model_list}})
          declare -i model_num=${#model_array[@]}
          echo "the number of model is $model_num" 
          
          lower_model_list=()
          upper_model_list=()
          model_list=()
          for (( i=0; i<$model_num; i++ ))
          do
                  [ $i -eq $(( $model_num - 1 )) ] && lower_model_list[$i]="\"${model_array[$i],,}\""
                  [ $i -ne $(( $model_num - 1 ))  ] && lower_model_list[$i]="\"${model_array[$i],,}\","                  
                  
                  [ $i -eq $(( $model_num - 1 )) ] && upper_model_list[$i]="\"${model_array[$i]}\""
                  [ $i -ne $(( $model_num - 1 ))  ] && upper_model_list[$i]="\"${model_array[$i]}\","
                  echo  $i
          done          
          lower_list=${lower_model_list[@]}
          upper_list=${upper_model_list[@]}
          
          echo $upper_model_list
          echo $lower_model_list
          
          sed -i "28c\    model_list = [$lower_list]" ./distributed_benchmark/gen_template.py \
          &&sed -i "29c\    model_name_list = [$upper_list]" ./distributed_benchmark/gen_template.py\
          &&echo "------------------------------------------------gen_template.py----------------------------------------------"\
          &&cat ./distributed_benchmark/gen_template.py\
          &&echo "----------------------------------------------------end-------------------------------------------------------"\
          &&sudo rm -f ./distributed_benchmark/yaml_file/* \
          && cd ./distributed_benchmark/\
          &&python3 ./gen_template.py         
      - name: run the distributed test
        run: | 
          currentTime=`date "+%Y-%m-%d-%H-%M-%S"`
          log_tag=
          if [[ -n ${{github.event.inputs.log_tag}} ]];then
              log_tag=${{github.event.inputs.log_tag}}
          else
              deeprec_image_tag=$(echo ${{github.event.inputs.DeepRec_test_image}} | awk -F ":" '{print $2}')
              if [[ $deeprec_image_tag == latest ]];then
                  log_tag=$currentTime$deeprec_image_tag
              else
                  commit_id=$(echo $deeprec_image_tag | cut -c 8-14 )
                  log_tag=$currentTime-$commit_it
              fi
          fi     
          cd /home/shanlin/DeepRec_CI/distributed_benchmark/\
          && bash -x distributed_test.sh $log_tag
          
          if [[ $? == 1 ]];then
            echo "The UT has not been finished"
            exit 1
          fi
      - name: upload log files to github
        run: | 
          cd /home/shanlin/DeepRec_CI/
          git add distributed_benchmark/logs/$log_tag/*
          git commit -m "add log files and xls file of $log_tag"
          git push 
      - name: output infomation
        run: |
          echo "the distributed benchmark has been finished"
          echo "the output log file will be put in the directory /home/shanlin/DeepRec_CI/distributed_benchmark/logs/$currentTime/"
